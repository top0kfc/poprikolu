const { PermissionFlagsBits } = require('discord.js');

module.exports = {
  name: 'test',
  description: '–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏–∫—Ä–∞—à–µ—Ä–∞',
  aliases: ['—Ç–µ—Å—Ç', 'testing'],
  usage: '!test <spam|channels|roles|mass|raid|report|cleanup|stop>',
  
  async execute(message, args, bot) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (!bot.testingSystem.canRunTests(message.member)) {
      return message.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤!');
    }

    if (!args[0]) {
      const embed = {
        color: 0x00ff00,
        title: 'üß™ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏–∫—Ä–∞—à–µ—Ä–∞',
        description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
        fields: [
          {
            name: 'üì® –¢–µ—Å—Ç —Å–ø–∞–º–∞',
            value: '`!test spam [intensity]` - –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n(intensity: low/medium/high)',
            inline: false
          },
          {
            name: 'üìÅ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤',
            value: '`!test channels [intensity]` - –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤',
            inline: false
          },
          {
            name: 'üë• –¢–µ—Å—Ç —Ä–æ–ª–µ–π',
            value: '`!test roles [intensity]` - –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ —Ä–æ–ª–µ–π',
            inline: false
          },
          {
            name: 'üí• –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç',
            value: '`!test mass [intensity]` - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∑–∞—â–∏—Ç',
            inline: false
          },
          {
            name: 'üö® –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–π–¥–∞',
            value: '`!test raid [intensity]` - –°–∏–º—É–ª—è—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            inline: false
          },
          {
            name: 'üìä –û—Ç—á–µ—Ç',
            value: '`!test report` - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            inline: false
          },
          {
            name: 'üßπ –û—á–∏—Å—Ç–∫–∞',
            value: '`!test cleanup` - –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
            inline: false
          },
          {
            name: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞',
            value: '`!test stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã',
            inline: false
          },
          {
            name: 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
            value: '`!test debug` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º',
            inline: false
          }
        ],
        footer: {
          text: '‚ö†Ô∏è –¢–µ—Å—Ç—ã –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ!'
        }
      };

      return message.reply({ embeds: [embed] });
    }

    const subCommand = args[0].toLowerCase();
    const intensity = args[1] || 'medium';

    try {
      switch (subCommand) {
        case 'spam':
        case '—Å–ø–∞–º':
          await this.handleSpamTest(message, bot, intensity);
          break;

        case 'channels':
        case '–∫–∞–Ω–∞–ª—ã':
          await this.handleChannelTest(message, bot, intensity);
          break;

        case 'roles':
        case '—Ä–æ–ª–∏':
          await this.handleRoleTest(message, bot, intensity);
          break;

        case 'mass':
        case '–º–∞—Å—Å–æ–≤—ã–π':
          await this.handleMassTest(message, bot, intensity);
          break;

        case 'raid':
        case '—Ä–µ–π–¥':
          await this.handleRaidTest(message, bot, intensity);
          break;

        case 'report':
        case '–æ—Ç—á–µ—Ç':
          await this.handleReport(message, bot);
          break;

        case 'cleanup':
        case '–æ—á–∏—Å—Ç–∫–∞':
          await this.handleCleanup(message, bot);
          break;

        case 'stop':
        case '—Å—Ç–æ–ø':
          await this.handleStop(message, bot);
          break;

        case 'debug':
        case '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
          await this.handleDebug(message, bot);
          break;

        default:
          message.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!test` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
      }
    } catch (error) {
      bot.logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:', error);
      message.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞!');
    }
  },

  async handleSpamTest(message, bot, intensity) {
    const loadingMsg = await message.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–ø–∞–º–∞...');
    
    try {
      const result = await bot.testingSystem.runSpamTest(message.channel, intensity);
      
      const embed = {
        color: result.effectiveness > 80 ? 0x00ff00 : result.effectiveness > 50 ? 0xffff00 : 0xff0000,
        title: 'üì® –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–ø–∞–º–∞',
        fields: [
          { name: 'üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π', value: result.messagesSent.toString(), inline: true },
          { name: 'üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', value: result.messagesBlocked.toString(), inline: true },
          { name: 'üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: `${result.effectiveness}%`, inline: true },
          { name: '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${Math.round(result.duration / 1000)}—Å`, inline: true }
        ],
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–ø–∞–º–∞!');
    }
  },

  async handleChannelTest(message, bot, intensity) {
    const loadingMsg = await message.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...');
    
    try {
      const result = await bot.testingSystem.runChannelSpamTest(message.guild, intensity);
      
      const embed = {
        color: result.effectiveness > 80 ? 0x00ff00 : result.effectiveness > 50 ? 0xffff00 : 0xff0000,
        title: 'üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤',
        fields: [
          { name: 'üìÅ –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤', value: result.channelsCreated.toString(), inline: true },
          { name: 'üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', value: result.channelsBlocked.toString(), inline: true },
          { name: 'üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: `${result.effectiveness}%`, inline: true },
          { name: '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${Math.round(result.duration / 1000)}—Å`, inline: true }
        ],
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤!');
    }
  },

  async handleRoleTest(message, bot, intensity) {
    const loadingMsg = await message.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π...');
    
    try {
      const result = await bot.testingSystem.runRoleSpamTest(message.guild, intensity);
      
      const embed = {
        color: result.effectiveness > 80 ? 0x00ff00 : result.effectiveness > 50 ? 0xffff00 : 0xff0000,
        title: 'üë• –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Ä–æ–ª–µ–π',
        fields: [
          { name: 'üë• –°–æ–∑–¥–∞–Ω–æ —Ä–æ–ª–µ–π', value: result.rolesCreated.toString(), inline: true },
          { name: 'üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', value: result.rolesBlocked.toString(), inline: true },
          { name: 'üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: `${result.effectiveness}%`, inline: true },
          { name: '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${Math.round(result.duration / 1000)}—Å`, inline: true }
        ],
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Ä–æ–ª–µ–π!');
    }
  },

  async handleMassTest(message, bot, intensity) {
    const loadingMsg = await message.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é –º–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
    
    try {
      const result = await bot.testingSystem.runMassActionTest(message.guild, message.channel, intensity);
      
      const embed = {
        color: result.overallEffectiveness > 80 ? 0x00ff00 : result.overallEffectiveness > 50 ? 0xffff00 : 0xff0000,
        title: 'üí• –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞',
        fields: [
          { name: 'üìä –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', value: `${result.overallEffectiveness}%`, inline: true },
          { name: '‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${Math.round(result.duration / 1000)}—Å`, inline: true },
          { name: 'üß™ –ü–æ–¥—Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', value: result.subTests.length.toString(), inline: true }
        ],
        description: result.subTests.map(test => 
          `${test.success ? '‚úÖ' : '‚ùå'} ${test.type}: ${test.success ? `${test.result.effectiveness}%` : '–û—à–∏–±–∫–∞'}`
        ).join('\n'),
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞!');
    }
  },

  async handleRaidTest(message, bot, intensity) {
    const loadingMsg = await message.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ü–∏—é —Ä–µ–π–¥–∞...');
    
    try {
      const result = await bot.testingSystem.simulateRaid(message.guild, intensity);
      
      const embed = {
        color: 0x00ff00,
        title: 'üö® –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–π–¥–∞',
        fields: [
          { name: 'üë• –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π', value: result.simulatedJoins.toString(), inline: true },
          { name: '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: `${Math.round(result.duration / 1000)}—Å`, inline: true }
        ],
        description: result.note,
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–π–¥–∞!');
    }
  },

  async handleReport(message, bot) {
    const report = bot.testingSystem.generateTestReport();
    const activeTests = bot.testingSystem.getActiveTests();
    const protectionStats = bot.advancedProtection.getProtectionStats();

    const embed = {
      color: 0x0099ff,
      title: 'üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω—Ç–∏–∫—Ä–∞—à–µ—Ä–∞',
      description: report,
      fields: [
        {
          name: 'üõ°Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—Ç—ã',
          value: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${protectionStats.suspiciousUsers}\n` +
                 `–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${protectionStats.emergencyMode ? 'üî¥ –ê–∫—Ç–∏–≤–µ–Ω' : 'üü¢ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
                 `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏–º–∏—Ç–æ–≤: ${protectionStats.rateLimitTracking}`,
          inline: false
        }
      ],
      timestamp: new Date(),
      footer: { text: 'Anti-Crasher Bot v2.0' }
    };

    message.reply({ embeds: [embed] });
  },

  async handleCleanup(message, bot) {
    const loadingMsg = await message.reply('üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const result = await bot.testingSystem.cleanupTestData(message.guild);
      
      const embed = {
        color: 0x00ff00,
        title: 'üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        fields: [
          { name: 'üìÅ –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤', value: result.cleanedChannels.toString(), inline: true },
          { name: 'üë• –£–¥–∞–ª–µ–Ω–æ —Ä–æ–ª–µ–π', value: result.cleanedRoles.toString(), inline: true }
        ],
        timestamp: new Date(),
        footer: { text: 'Anti-Crasher Testing System' }
      };

      await loadingMsg.edit({ content: '', embeds: [embed] });
    } catch (error) {
      await loadingMsg.edit('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!');
    }
  },

  async handleStop(message, bot) {
    const stoppedCount = bot.testingSystem.stopAllTests();
    
    const embed = {
      color: 0xff9900,
      title: '‚èπÔ∏è –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
      description: `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${stoppedCount}`,
      timestamp: new Date(),
      footer: { text: 'Anti-Crasher Testing System' }
    };

    message.reply({ embeds: [embed] });
  },

  async handleDebug(message, bot) {
    const member = message.member;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    const isOwner = member.guild.ownerId === member.id;
    const isAdmin = member.permissions.has(PermissionFlagsBits.Administrator);
    const isAllowedTester = bot.config.testing.allowedTesters.includes(member.id);
    const hasTesterRole = bot.config.bypassRoles && bot.config.bypassRoles.some(role => 
      member.roles.cache.some(memberRole => 
        memberRole.name.toLowerCase().includes(role.toLowerCase())
      )
    );
    
    const canRunTests = bot.testingSystem.canRunTests(member);
    
    const embed = {
      color: canRunTests ? 0x00ff00 : 0xff0000,
      title: 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∞–º',
      fields: [
        { name: 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `${member.user.tag} (ID: ${member.id})`, inline: false },
        { name: 'üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º', value: bot.config.testing.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω', inline: true },
        { name: 'üëë –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞', value: isOwner ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', value: isAdmin ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üìù –í —Å–ø–∏—Å–∫–µ —Ç–µ—Å—Ç–µ—Ä–æ–≤', value: isAllowedTester ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üé≠ –†–æ–ª—å —Ç–µ—Å—Ç–µ—Ä–∞', value: hasTesterRole ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç', inline: true },
        { name: 'üîê –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ—Å—Ç—É–ø', value: canRunTests ? '‚úÖ –†–ê–ó–†–ï–®–ï–ù' : '‚ùå –ó–ê–ü–†–ï–©–ï–ù', inline: true }
      ],
      description: `**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n` +
                   `‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–µ—Ä—ã: ${bot.config.testing.allowedTesters.length > 0 ? bot.config.testing.allowedTesters.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n` +
                   `‚Ä¢ –†–æ–ª–∏ –æ–±—Ö–æ–¥–∞: ${bot.config.bypassRoles ? bot.config.bypassRoles.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n` +
                   `${!canRunTests ? '**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:**\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ TESTING_MODE=true\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ ALLOWED_TESTERS\n‚Ä¢ –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : ''}`,
      timestamp: new Date(),
      footer: { text: 'Anti-Crasher Debug System' }
    };

    message.reply({ embeds: [embed] });
  }
};