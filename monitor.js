#!/usr/bin/env node

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class BotMonitor {
  constructor() {
    this.botProcess = null;
    this.restartCount = 0;
    this.maxRestarts = 5;
    this.restartDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
    this.isRunning = false;
    this.logFile = path.join(__dirname, 'logs', 'monitor.log');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    this.ensureLogsDirectory();
  }

  ensureLogsDirectory() {
    const logsDir = path.join(__dirname, 'logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
  }

  log(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\\n`;\n    \n    console.log(logMessage.trim());\n    \n    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª\n    fs.appendFileSync(this.logFile, logMessage);\n  }\n\n  async startBot() {\n    if (this.isRunning) {\n      this.log('‚ö†Ô∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω');\n      return;\n    }\n\n    this.log('üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...');\n    this.isRunning = true;\n\n    this.botProcess = spawn('node', ['index.js'], {\n      stdio: ['inherit', 'pipe', 'pipe'],\n      env: { ...process.env, NODE_ENV: 'production' }\n    });\n\n    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞\n    this.botProcess.stdout.on('data', (data) => {\n      process.stdout.write(data);\n    });\n\n    this.botProcess.stderr.on('data', (data) => {\n      process.stderr.write(data);\n    });\n\n    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞\n    this.botProcess.on('exit', (code, signal) => {\n      this.isRunning = false;\n      \n      if (signal) {\n        this.log(`‚ö†Ô∏è  –ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª–æ–º: ${signal}`);\n      } else {\n        this.log(`‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);\n      }\n\n      // –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n      if (this.restartCount < this.maxRestarts) {\n        this.scheduleRestart();\n      } else {\n        this.log(`üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${this.maxRestarts})`);\n        this.log('üíÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.');\n        process.exit(1);\n      }\n    });\n\n    this.botProcess.on('error', (error) => {\n      this.log(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: ${error.message}`);\n      this.isRunning = false;\n      this.scheduleRestart();\n    });\n  }\n\n  scheduleRestart() {\n    this.restartCount++;\n    this.log(`üîÑ –ü–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ #${this.restartCount} —á–µ—Ä–µ–∑ ${this.restartDelay/1000} —Å–µ–∫—É–Ω–¥...`);\n    \n    setTimeout(() => {\n      this.startBot();\n    }, this.restartDelay);\n\n    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (exponential backoff)\n    this.restartDelay = Math.min(this.restartDelay * 1.5, 60000); // –ú–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞\n  }\n\n  async stopBot() {\n    if (!this.isRunning || !this.botProcess) {\n      this.log('‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');\n      return;\n    }\n\n    this.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');\n    \n    // –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n    this.botProcess.kill('SIGTERM');\n    \n    // –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º\n    setTimeout(() => {\n      if (this.isRunning) {\n        this.log('üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');\n        this.botProcess.kill('SIGKILL');\n      }\n    }, 10000);\n  }\n\n  async healthCheck() {\n    try {\n      const { spawn } = require('child_process');\n      \n      return new Promise((resolve) => {\n        const healthProcess = spawn('node', ['health-check.js'], { \n          stdio: 'pipe' \n        });\n        \n        healthProcess.on('exit', (code) => {\n          resolve(code === 0);\n        });\n        \n        healthProcess.on('error', () => {\n          resolve(false);\n        });\n      });\n    } catch (error) {\n      this.log(`üî• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);\n      return false;\n    }\n  }\n\n  async startMonitoring() {\n    this.log('üëÅÔ∏è  –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Discord –±–æ—Ç–∞');\n    this.log('=' .repeat(50));\n    \n    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞\n    await this.startBot();\n    \n    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è\n    setInterval(async () => {\n      if (this.isRunning) {\n        const isHealthy = await this.healthCheck();\n        \n        if (!isHealthy) {\n          this.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...');\n          this.stopBot();\n        } else {\n          this.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');\n          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ\n          this.restartCount = 0;\n          this.restartDelay = 5000;\n        }\n      }\n    }, 300000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n    process.on('SIGINT', () => {\n      this.log('üì± –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');\n      this.stopBot();\n      setTimeout(() => process.exit(0), 5000);\n    });\n\n    process.on('SIGTERM', () => {\n      this.log('üì± –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');\n      this.stopBot();\n      setTimeout(() => process.exit(0), 5000);\n    });\n  }\n}\n\n// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\nif (require.main === module) {\n  const monitor = new BotMonitor();\n  monitor.startMonitoring().catch(error => {\n    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = BotMonitor;"