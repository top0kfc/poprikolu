const { PermissionFlagsBits, ChannelType } = require('discord.js');

class TestingSystem {
  constructor(client, config, logger) {
    this.client = client;
    this.config = config;
    this.logger = logger;
    this.activeTests = new Map();
    this.testResults = [];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã
   */
  canRunTests(member) {
    if (!member) {
      this.logger.info('canRunTests: member –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã
    if (!this.config.testing.enabled) {
      this.logger.info('canRunTests: TESTING_MODE –æ—Ç–∫–ª—é—á–µ–Ω');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞ (guild owner)
    const isOwner = member.guild.ownerId === member.id;
    if (isOwner) {
      this.logger.info(`canRunTests: ${member.user.tag} —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAdmin = member.permissions.has(PermissionFlagsBits.Administrator);
    if (isAdmin) {
      this.logger.info(`canRunTests: ${member.user.tag} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    const isAllowedTester = this.config.testing.allowedTesters.includes(member.id);
    if (isAllowedTester) {
      this.logger.info(`canRunTests: ${member.user.tag} –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    const hasTesterRole = this.config.bypassRoles && this.config.bypassRoles.some(role => 
      member.roles.cache.some(memberRole => 
        memberRole.name.toLowerCase().includes(role.toLowerCase())
      )
    );
    
    if (hasTesterRole) {
      this.logger.info(`canRunTests: ${member.user.tag} –∏–º–µ–µ—Ç —Ä–æ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      return true;
    }

    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
    this.logger.info(`canRunTests: ${member.user.tag} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    this.logger.info(`canRunTests: isOwner=${isOwner}, isAdmin=${isAdmin}, isAllowedTester=${isAllowedTester}, hasTesterRole=${hasTesterRole}`);
    
    return false;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async runSpamTest(channel, intensity = 'medium', duration = 30000) {
    const testId = `spam-${Date.now()}`;
    const messageCount = this.getIntensityValue(intensity, { low: 10, medium: 25, high: 50 });
    const delay = Math.floor(duration / messageCount);

    this.logger.info(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∞–º–∞: ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ ${duration}ms`);

    this.activeTests.set(testId, {
      type: 'spam',
      startTime: Date.now(),
      expectedBlocked: 0,
      actualBlocked: 0
    });

    const messages = [
      'Test spam message 1',
      'Test spam message 2', 
      'Test spam message 3',
      'SPAM TEST MESSAGE IN CAPS',
      '@everyone test mention spam',
      'https://discord.gg/fake-invite-link',
      'üö®üö®üö® EMERGENCY SPAM TEST üö®üö®üö®',
      'Testing message flooding protection',
      'Identical message for duplicate test',
      'Identical message for duplicate test'
    ];

    let sentCount = 0;
    let blockedCount = 0;

    for (let i = 0; i < messageCount; i++) {
      try {
        const messageContent = messages[i % messages.length] + ` #${i}`;
        await channel.send(messageContent);
        sentCount++;
        await this.delay(delay);
      } catch (error) {
        blockedCount++;
        this.logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ #${i} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${error.message}`);
      }
    }

    const testResult = {
      testId,
      type: 'spam',
      duration: Date.now() - this.activeTests.get(testId).startTime,
      messagesSent: sentCount,
      messagesBlocked: blockedCount,
      effectiveness: Math.round((blockedCount / messageCount) * 100)
    };

    this.testResults.push(testResult);
    this.activeTests.delete(testId);

    this.logger.info(`‚úÖ –¢–µ—Å—Ç —Å–ø–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blockedCount} (${testResult.effectiveness}%)`);
    return testResult;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
   */
  async runChannelSpamTest(guild, intensity = 'low') {
    const testId = `channel-spam-${Date.now()}`;
    const channelCount = this.getIntensityValue(intensity, { low: 5, medium: 15, high: 30 });
    
    this.logger.info(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤: ${channelCount} –∫–∞–Ω–∞–ª–æ–≤`);

    let createdCount = 0;
    let blockedCount = 0;

    this.activeTests.set(testId, {
      type: 'channelSpam',
      startTime: Date.now()
    });

    for (let i = 0; i < channelCount; i++) {
      try {
        await guild.channels.create({
          name: `test-channel-${i}-${Date.now()}`,
          type: ChannelType.GuildText,
          reason: 'Testing anti-crash protection'
        });
        createdCount++;
        await this.delay(1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏
      } catch (error) {
        blockedCount++;
        this.logger.info(`–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ #${i} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${error.message}`);
      }
    }

    const testResult = {
      testId,
      type: 'channelSpam',
      duration: Date.now() - this.activeTests.get(testId).startTime,
      channelsCreated: createdCount,
      channelsBlocked: blockedCount,
      effectiveness: Math.round((blockedCount / channelCount) * 100)
    };

    this.testResults.push(testResult);
    this.activeTests.delete(testId);

    this.logger.info(`‚úÖ –¢–µ—Å—Ç —Å–ø–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${createdCount}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blockedCount} (${testResult.effectiveness}%)`);
    return testResult;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
   */
  async runRoleSpamTest(guild, intensity = 'medium') {
    const testId = `role-spam-${Date.now()}`;
    const roleCount = this.getIntensityValue(intensity, { low: 3, medium: 8, high: 15 });
    
    this.logger.info(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–ø–∞–º–∞ —Ä–æ–ª–µ–π: ${roleCount} —Ä–æ–ª–µ–π`);

    let createdCount = 0;
    let blockedCount = 0;

    this.activeTests.set(testId, {
      type: 'roleSpam',
      startTime: Date.now()
    });

    for (let i = 0; i < roleCount; i++) {
      try {
        await guild.roles.create({
          name: `test-role-${i}-${Date.now()}`,
          color: Math.floor(Math.random() * 16777215),
          reason: 'Testing anti-crash protection'
        });
        createdCount++;
        await this.delay(2000); // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏
      } catch (error) {
        blockedCount++;
        this.logger.info(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ #${i} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${error.message}`);
      }
    }

    const testResult = {
      testId,
      type: 'roleSpam',
      duration: Date.now() - this.activeTests.get(testId).startTime,
      rolesCreated: createdCount,
      rolesBlocked: blockedCount,
      effectiveness: Math.round((blockedCount / roleCount) * 100)
    };

    this.testResults.push(testResult);
    this.activeTests.delete(testId);

    this.logger.info(`‚úÖ –¢–µ—Å—Ç —Å–ø–∞–º–∞ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ ${createdCount}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blockedCount} (${testResult.effectiveness}%)`);
    return testResult;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
   */
  async runMassActionTest(guild, channel, intensity = 'high') {
    const testId = `mass-action-${Date.now()}`;
    
    this.logger.info(`üß™ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é: ${intensity}`);

    this.activeTests.set(testId, {
      type: 'massAction',
      startTime: Date.now()
    });

    const results = await Promise.allSettled([
      this.runSpamTest(channel, intensity, 15000),
      this.runChannelSpamTest(guild, intensity),
      this.runRoleSpamTest(guild, intensity)
    ]);

    const testResult = {
      testId,
      type: 'massAction',
      duration: Date.now() - this.activeTests.get(testId).startTime,
      subTests: results.map((result, index) => ({
        type: ['spam', 'channelSpam', 'roleSpam'][index],
        success: result.status === 'fulfilled',
        result: result.status === 'fulfilled' ? result.value : result.reason
      })),
      overallEffectiveness: this.calculateOverallEffectiveness(results)
    };

    this.testResults.push(testResult);
    this.activeTests.delete(testId);

    this.logger.info(`‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${testResult.overallEffectiveness}%`);
    return testResult;
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–π–¥–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
   */
  async simulateRaid(guild, intensity = 'high') {
    const testId = `raid-simulation-${Date.now()}`;
    const connectionCount = this.getIntensityValue(intensity, { low: 10, medium: 25, high: 50 });
    
    this.logger.info(`üß™ –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–π–¥–∞: –∏–º–∏—Ç–∞—Ü–∏—è ${connectionCount} –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);

    // –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –º—ã —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –±—ã—Å—Ç—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.activeTests.set(testId, {
      type: 'raidSimulation',
      startTime: Date.now()
    });

    const testResult = {
      testId,
      type: 'raidSimulation',
      duration: Date.now() - this.activeTests.get(testId).startTime,
      simulatedJoins: connectionCount,
      note: '–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–π–¥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤'
    };

    this.testResults.push(testResult);
    this.activeTests.delete(testId);

    return testResult;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanupTestData(guild) {
    this.logger.info('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    let cleanedChannels = 0;
    let cleanedRoles = 0;

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    const channels = guild.channels.cache.filter(channel => 
      channel.name.includes('test-channel-') && channel.manageable
    );

    for (const channel of channels.values()) {
      try {
        await channel.delete('Cleanup test data');
        cleanedChannels++;
        await this.delay(1000);
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ${channel.name}: ${error.message}`);
      }
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–æ–ª–∏
    const roles = guild.roles.cache.filter(role => 
      role.name.includes('test-role-') && role.editable
    );

    for (const role of roles.values()) {
      try {
        await role.delete('Cleanup test data');
        cleanedRoles++;
        await this.delay(1000);
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–æ–ª—å ${role.name}: ${error.message}`);
      }
    }

    this.logger.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${cleanedChannels} –∫–∞–Ω–∞–ª–æ–≤ –∏ ${cleanedRoles} —Ä–æ–ª–µ–π`);
    
    return {
      cleanedChannels,
      cleanedRoles
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Å—Ç–æ–≤
   */
  getTestResults(limit = 10) {
    return this.testResults.slice(-limit);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
   */
  getActiveTests() {
    return Array.from(this.activeTests.entries()).map(([id, test]) => ({
      id,
      ...test,
      duration: Date.now() - test.startTime
    }));
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
   */
  stopAllTests() {
    const stoppedCount = this.activeTests.size;
    this.activeTests.clear();
    this.logger.info(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${stoppedCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤`);
    return stoppedCount;
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getIntensityValue(intensity, values) {
    return values[intensity] || values.medium;
  }

  calculateOverallEffectiveness(results) {
    const successful = results.filter(r => r.status === 'fulfilled');
    if (successful.length === 0) return 0;

    const totalEffectiveness = successful.reduce((sum, result) => {
      return sum + (result.value.effectiveness || 0);
    }, 0);

    return Math.round(totalEffectiveness / successful.length);
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  generateTestReport() {
    const recentTests = this.getTestResults(20);
    const activeTests = this.getActiveTests();

    if (recentTests.length === 0 && activeTests.length === 0) {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏';
    }

    let report = 'üìä **–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–ù–¢–ò–ö–†–ê–®–ï–†–ê**\n\n';

    if (activeTests.length > 0) {
      report += `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã:** ${activeTests.length}\n`;
      activeTests.forEach(test => {
        report += `‚Ä¢ ${test.type} - ${Math.round(test.duration / 1000)}—Å\n`;
      });
      report += '\n';
    }

    if (recentTests.length > 0) {
      report += `üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentTests.length} —Ç–µ—Å—Ç–æ–≤:**\n`;
      
      const avgEffectiveness = Math.round(
        recentTests.reduce((sum, test) => sum + (test.effectiveness || test.overallEffectiveness || 0), 0) / recentTests.length
      );

      report += `–°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: **${avgEffectiveness}%**\n\n`;

      recentTests.reverse().slice(0, 5).forEach(test => {
        const effectiveness = test.effectiveness || test.overallEffectiveness || 0;
        const emoji = effectiveness > 80 ? 'üü¢' : effectiveness > 50 ? 'üü°' : 'üî¥';
        report += `${emoji} **${test.type}** - ${effectiveness}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n`;
      });
    }

    return report;
  }
}

module.exports = TestingSystem;