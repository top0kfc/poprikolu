const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');

class RaidProtection {
  constructor(client, config, logger) {
    this.client = client;
    this.config = config;
    this.logger = logger;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.joinTracker = new Map();
    
    // –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    this.lockdownMode = false;
    
    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupJoinData();
    }, 10 * 60 * 1000);
  }

  async handleMemberJoin(member) {
    try {
      const guild = member.guild;
      const now = Date.now();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
      if (!this.joinTracker.has(guild.id)) {
        this.joinTracker.set(guild.id, []);
      }
      
      const joinData = this.joinTracker.get(guild.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      joinData.push({
        userId: member.id,
        timestamp: now,
        accountAge: now - member.user.createdTimestamp,
        username: member.user.username,
        avatar: member.user.avatar
      });
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞)
      const timeWindow = this.config.raidProtection.timeWindow;
      const recentJoins = joinData.filter(join => 
        now - join.timestamp <= timeWindow
      );
      
      this.joinTracker.set(guild.id, recentJoins);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–π–¥
      if (this.isRaidDetected(recentJoins, member)) {
        await this.handleRaidDetection(guild, recentJoins);
      }
      
      // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - —Å—Ä–∞–∑—É –∫–∏–∫–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (this.lockdownMode) {
        await this.handleLockdownJoin(member);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      if (this.isSuspiciousAccount(member)) {
        await this.handleSuspiciousAccount(member);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  isRaidDetected(recentJoins, currentMember) {
    const joinLimit = this.config.raidProtection.joinLimit;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    if (recentJoins.length >= joinLimit) {
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–µ–π–¥–∞
      const newAccounts = recentJoins.filter(join => 
        join.accountAge < 24 * 60 * 60 * 1000 // –ê–∫–∫–∞—É–Ω—Ç—ã –º–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤
      ).length;
      
      const similarNames = this.countSimilarUsernames(recentJoins);
      const noAvatarCount = recentJoins.filter(join => !join.avatar).length;
      
      // –†–µ–π–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –µ—Å–ª–∏:
      // - –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (>50% –æ—Ç –ª–∏–º–∏—Ç–∞)
      // - –ú–Ω–æ–≥–æ –ø–æ—Ö–æ–∂–∏—Ö –∏–º–µ–Ω (>30% –æ—Ç –ª–∏–º–∏—Ç–∞) 
      // - –ú–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∞ (>60% –æ—Ç –ª–∏–º–∏—Ç–∞)
      if (newAccounts >= Math.ceil(joinLimit * 0.5) ||
          similarNames >= Math.ceil(joinLimit * 0.3) ||
          noAvatarCount >= Math.ceil(joinLimit * 0.6)) {
        return true;
      }
    }
    
    return false;
  }

  countSimilarUsernames(joins) {
    const usernames = joins.map(join => join.username.toLowerCase());
    const groups = new Map();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–º–µ–Ω–∞
    for (const username of usernames) {
      const basePattern = this.extractUsernamePattern(username);
      if (groups.has(basePattern)) {
        groups.set(basePattern, groups.get(basePattern) + 1);
      } else {
        groups.set(basePattern, 1);
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –∏–º–µ–Ω
    return Math.max(...groups.values());
  }

  extractUsernamePattern(username) {
    // –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    return username.replace(/[0-9_\-\.]+/g, '').substring(0, 8);
  }

  isSuspiciousAccount(member) {
    const accountAge = Date.now() - member.user.createdTimestamp;
    const dayInMs = 24 * 60 * 60 * 1000;
    
    // –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –µ—Å–ª–∏:
    return (
      accountAge < dayInMs * 7 && // –ú–ª–∞–¥—à–µ 7 –¥–Ω–µ–π
      !member.user.avatar && // –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
      /^[a-zA-Z]+[0-9]{4,}$/.test(member.user.username) // –ò–º—è —Ç–∏–ø–∞ "user1234"
    );
  }

  async handleRaidDetection(guild, recentJoins) {
    try {
      this.logger.security(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –†–ï–ô–î –ù–ê –°–ï–†–í–ï–†–ï ${guild.name}`, {
        guildId: guild.id,
        guildName: guild.name,
        joinsCount: recentJoins.length,
        timeWindow: this.config.raidProtection.timeWindow
      });

      // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      this.lockdownMode = true;

      // –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let kickedCount = 0;
      for (const joinInfo of recentJoins) {
        try {
          const member = guild.members.cache.get(joinInfo.userId);
          if (member && this.shouldKickDuringRaid(joinInfo)) {
            await member.kick('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–π–¥–∞');
            kickedCount++;
          }
        } catch (kickError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${joinInfo.userId}:`, kickError);
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      await this.ensureQuarantineRole(guild);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsAboutRaid(guild, recentJoins.length, kickedCount);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
      setTimeout(() => {
        this.lockdownMode = false;
        this.logger.info(`–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${guild.name}`);
      }, 30 * 60 * 1000);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–π–¥–∞:', error);
    }
  }

  shouldKickDuringRaid(joinInfo) {
    const accountAge = joinInfo.accountAge;
    const dayInMs = 24 * 60 * 60 * 1000;
    
    // –ö–∏–∫–∞–µ–º –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –º–ª–∞–¥—à–µ 3 –¥–Ω–µ–π –∏ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞
    return accountAge < dayInMs * 3 && !joinInfo.avatar;
  }

  async handleLockdownJoin(member) {
    try {
      this.logger.security(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${member.user.tag}`, {
        userId: member.id,
        username: member.user.tag
      });

      // –ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await member.kick('–°–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–π–¥–∞');

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –ª–æ–≥–∏
      await this.sendSecurityLog(member.guild, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–π–¥–∞', {
        user: member.user.tag,
        userId: member.id,
        action: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∏–∫',
        reason: '–°–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–π–¥–∞'
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    }
  }

  async handleSuspiciousAccount(member) {
    try {
      this.logger.security(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: ${member.user.tag}`, {
        userId: member.id,
        username: member.user.tag,
        accountAge: Date.now() - member.user.createdTimestamp,
        hasAvatar: !!member.user.avatar
      });

      // –ü–æ–º–µ—â–∞–µ–º –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω
      await this.quarantineUser(member);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
      await this.sendSecurityLog(member.guild, '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç', {
        user: member.user.tag,
        userId: member.id,
        action: '–ü–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω',
        reason: '–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏'
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    }
  }

  async quarantineUser(member) {
    try {
      const quarantineRoleName = this.config.raidProtection.quarantineRole;
      let quarantineRole = member.guild.roles.cache.find(role => 
        role.name.toLowerCase() === quarantineRoleName.toLowerCase()
      );

      if (!quarantineRole) {
        await this.ensureQuarantineRole(member.guild);
        quarantineRole = member.guild.roles.cache.find(role => 
          role.name.toLowerCase() === quarantineRoleName.toLowerCase()
        );
      }

      if (quarantineRole) {
        await member.roles.add(quarantineRole);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ
        try {
          const embed = new EmbedBuilder()
            .setColor(0xFFA500)
            .setTitle('üîç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
            .setDescription(`–ü—Ä–∏–≤–µ—Ç, ${member.user}! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`)
            .addFields(
              { name: '–ü—Ä–∏—á–∏–Ω–∞', value: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', inline: true },
              { name: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å?', value: '–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏', inline: true }
            )
            .setTimestamp();

          await member.send({ embeds: [embed] });
        } catch (dmError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ ${member.user.tag}`);
        }
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—â–µ–Ω–∏–∏ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω:', error);
    }
  }

  async ensureQuarantineRole(guild) {
    try {
      const roleName = this.config.raidProtection.quarantineRole;
      let role = guild.roles.cache.find(r => r.name.toLowerCase() === roleName.toLowerCase());

      if (!role) {
        role = await guild.roles.create({
          name: roleName,
          color: '#FFA500',
          permissions: [],
          reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞'
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        for (const channel of guild.channels.cache.values()) {
          try {
            await channel.permissionOverwrites.create(role, {
              SendMessages: false,
              Speak: false,
              AddReactions: false,
              CreatePublicThreads: false,
              CreatePrivateThreads: false,
              SendMessagesInThreads: false,
              ViewChannel: false // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
            });
          } catch (permError) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.name}:`, permError);
          }
        }

        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
        await this.createQuarantineChannel(guild, role);
        
        this.logger.info(`–°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: ${roleName}`);
      }

      return role;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞:', error);
      return null;
    }
  }

  async createQuarantineChannel(guild, quarantineRole) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
      const existingChannel = guild.channels.cache.find(ch => 
        ch.name === '–∫–∞—Ä–∞–Ω—Ç–∏–Ω' || ch.name === 'quarantine'
      );

      if (existingChannel) return existingChannel;

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
      const channel = await guild.channels.create({
        name: '–∫–∞—Ä–∞–Ω—Ç–∏–Ω',
        type: 0, // TEXT_CHANNEL
        topic: '–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        permissionOverwrites: [
          {
            id: guild.roles.everyone.id,
            deny: ['ViewChannel']
          },
          {
            id: quarantineRole.id,
            allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory']
          }
        ]
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const embed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle('üõ°Ô∏è –ö–∞–Ω–∞–ª –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞')
        .setDescription('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.')
        .addFields(
          { name: '–ü—Ä–∞–≤–∏–ª–∞', value: '‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã\n‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ\n‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏', inline: false },
          { name: '–ü–æ–º–æ—â—å', value: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã', inline: false }
        )
        .setTimestamp();

      await channel.send({ embeds: [embed] });

      this.logger.info(`–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: ${channel.name}`);
      return channel;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞:', error);
      return null;
    }
  }

  async notifyAdminsAboutRaid(guild, joinsCount, kickedCount) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω
      const admins = guild.members.cache.filter(member => 
        member.permissions.has(PermissionFlagsBits.Administrator) &&
        member.presence?.status !== 'offline'
      );

      const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle('üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –†–ï–ô–î-–ê–¢–ê–ö–ê!')
        .setDescription(`–°–µ—Ä–≤–µ—Ä **${guild.name}** –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è —Ä–µ–π–¥-–∞—Ç–∞–∫–µ!`)
        .addFields(
          { name: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', value: joinsCount.toString(), inline: true },
          { name: '–ö–∏–∫–Ω—É—Ç–æ', value: kickedCount.toString(), inline: true },
          { name: '–°—Ç–∞—Ç—É—Å', value: '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', inline: true },
          { name: '–î–µ–π—Å—Ç–≤–∏—è', value: '‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∏–∫–∞—é—Ç—Å—è\n‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω\n‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω–∏–º–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç', inline: false }
        )
        .setTimestamp();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      for (const admin of admins.values()) {
        try {
          await admin.send({ embeds: [embed] });
        } catch (dmError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.user.tag}:`, dmError);
        }
      }

      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
      await this.sendSecurityLog(guild, '–†–ï–ô–î-–ê–¢–ê–ö–ê', {
        user: '–°–∏—Å—Ç–µ–º–∞',
        userId: 'AUTO',
        action: `–ö–∏–∫–Ω—É—Ç–æ ${kickedCount} –∏–∑ ${joinsCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
        reason: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ–π–¥–µ:', error);
    }
  }

  async sendSecurityLog(guild, title, details) {
    try {
      const logChannelId = this.config.logChannelId;
      if (!logChannelId) return;

      const logChannel = guild.channels.cache.get(logChannelId);
      if (!logChannel) return;

      const embed = new EmbedBuilder()
        .setColor(0xFF4500)
        .setTitle(`üõ°Ô∏è ${title}`)
        .addFields(
          { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `${details.user} (${details.userId})`, inline: true },
          { name: '–î–µ–π—Å—Ç–≤–∏–µ', value: details.action, inline: true },
          { name: '–ü—Ä–∏—á–∏–Ω–∞', value: details.reason, inline: false }
        )
        .setTimestamp();

      await logChannel.send({ embeds: [embed] });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–π–¥–∞:', error);
    }
  }

  cleanupJoinData() {
    const now = Date.now();
    const maxAge = this.config.raidProtection.timeWindow * 2;
    
    for (const [guildId, joinData] of this.joinTracker.entries()) {
      const recentJoins = joinData.filter(join => 
        now - join.timestamp <= maxAge
      );
      
      if (recentJoins.length === 0) {
        this.joinTracker.delete(guildId);
      } else {
        this.joinTracker.set(guildId, recentJoins);
      }
    }
    
    this.logger.info(`–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ ${this.joinTracker.size}`);
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  async enableLockdown(guild) {
    this.lockdownMode = true;
    this.logger.action(`–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${guild.name}`);
  }

  async disableLockdown(guild) {
    this.lockdownMode = false;
    this.logger.action(`–†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${guild.name}`);
  }

  isLockdownActive() {
    return this.lockdownMode;
  }
}

module.exports = RaidProtection;