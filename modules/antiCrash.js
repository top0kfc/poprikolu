const { EmbedBuilder, PermissionFlagsBits, AuditLogEvent } = require('discord.js');

class AntiCrash {
  constructor(client, config, logger) {
    this.client = client;
    this.config = config;
    this.logger = logger;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
    this.serverActions = new Map();
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupActionData();
    }, 30 * 60 * 1000);
  }

  async handleChannelCreate(channel) {
    try {
      if (!channel.guild) return;
      
      const guild = channel.guild;
      const auditLogs = await guild.fetchAuditLogs({
        type: AuditLogEvent.ChannelCreate,
        limit: 1
      });
      
      const auditEntry = auditLogs.entries.first();
      if (!auditEntry) return;
      
      const executor = auditEntry.executor;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏
      if (executor.bot || this.isPermittedUser(guild.members.cache.get(executor.id))) {
        return;
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const actionKey = `${guild.id}-${executor.id}`;
      const now = Date.now();
      const hourInMs = 60 * 60 * 1000;
      
      if (!this.serverActions.has(actionKey)) {
        this.serverActions.set(actionKey, { channels: [], roles: [], invites: [] });
      }
      
      const userActions = this.serverActions.get(actionKey);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      userActions.channels.push({
        timestamp: now,
        channelId: channel.id,
        channelName: channel.name,
        type: channel.type
      });
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
      userActions.channels = userActions.channels.filter(action => 
        now - action.timestamp <= hourInMs
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
      if (userActions.channels.length > this.config.antiCrash.maxChannelsPerHour) {
        await this.handleChannelSpam(guild, executor, userActions.channels, channel);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
    }
  }

  async handleRoleCreate(role) {
    try {
      const guild = role.guild;
      const auditLogs = await guild.fetchAuditLogs({
        type: AuditLogEvent.RoleCreate,
        limit: 1
      });
      
      const auditEntry = auditLogs.entries.first();
      if (!auditEntry) return;
      
      const executor = auditEntry.executor;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏
      if (executor.bot || this.isPermittedUser(guild.members.cache.get(executor.id))) {
        return;
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const actionKey = `${guild.id}-${executor.id}`;
      const now = Date.now();
      const hourInMs = 60 * 60 * 1000;
      
      if (!this.serverActions.has(actionKey)) {
        this.serverActions.set(actionKey, { channels: [], roles: [], invites: [] });
      }
      
      const userActions = this.serverActions.get(actionKey);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      userActions.roles.push({
        timestamp: now,
        roleId: role.id,
        roleName: role.name,
        permissions: role.permissions.toArray()
      });
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
      userActions.roles = userActions.roles.filter(action => 
        now - action.timestamp <= hourInMs
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
      if (userActions.roles.length > this.config.antiCrash.maxRolesPerHour) {
        await this.handleRoleSpam(guild, executor, userActions.roles, role);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏:', error);
    }
  }

  async handleInviteCreate(invite) {
    try {
      const guild = invite.guild;
      if (!guild || !invite.inviter) return;
      
      const inviter = invite.inviter;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      if (inviter.bot || this.isPermittedUser(guild.members.cache.get(inviter.id))) {
        return;
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤
      const actionKey = `${guild.id}-${inviter.id}`;
      const now = Date.now();
      const hourInMs = 60 * 60 * 1000;
      
      if (!this.serverActions.has(actionKey)) {
        this.serverActions.set(actionKey, { channels: [], roles: [], invites: [] });
      }
      
      const userActions = this.serverActions.get(actionKey);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      userActions.invites.push({
        timestamp: now,
        inviteCode: invite.code,
        channelId: invite.channel?.id,
        maxUses: invite.maxUses,
        maxAge: invite.maxAge
      });
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
      userActions.invites = userActions.invites.filter(action => 
        now - action.timestamp <= hourInMs
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (–±–æ–ª—å—à–µ 20 –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ —á–∞—Å)
      if (userActions.invites.length > 20) {
        await this.handleInviteSpam(guild, inviter, userActions.invites);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞:', error);
    }
  }

  async handleChannelSpam(guild, executor, channels, lastChannel) {
    try {
      this.logger.security(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç ${executor.tag}`, {
        guildId: guild.id,
        guildName: guild.name,
        executorId: executor.id,
        executorTag: executor.tag,
        channelsCreated: channels.length
      });

      const member = guild.members.cache.get(executor.id);
      if (!member) return;

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      let deletedCount = 0;
      for (const channelInfo of channels) {
        try {
          const channel = guild.channels.cache.get(channelInfo.channelId);
          if (channel && channel.deletable) {
            await channel.delete('–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —Å–ø–∞–º –∫–∞–Ω–∞–ª–æ–≤');
            deletedCount++;
          }
        } catch (deleteError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ${channelInfo.channelName}:`, deleteError);
        }
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
      await this.revokeChannelPermissions(member);

      // –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 24 —á–∞—Å–∞
      await this.temporaryBan(member, '24 —á–∞—Å–∞', '–°–ø–∞–º –∫–∞–Ω–∞–ª–æ–≤ - –∞–≤—Ç–æ–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞');

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsAboutCrash(guild, {
        type: 'Channel Spam',
        executor: executor.tag,
        executorId: executor.id,
        count: channels.length,
        deleted: deletedCount,
        action: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 24 —á–∞—Å–∞'
      });

      // –õ–æ–≥–∏—Ä—É–µ–º
      await this.sendSecurityLog(guild, '–°–ø–∞–º –∫–∞–Ω–∞–ª–æ–≤', {
        user: executor.tag,
        userId: executor.id,
        action: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∫–∞–Ω–∞–ª–æ–≤, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω`,
        reason: `–°–æ–∑–¥–∞–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ —á–∞—Å`
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
    }
  }

  async handleRoleSpam(guild, executor, roles, lastRole) {
    try {
      this.logger.security(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º —Ä–æ–ª–µ–π –æ—Ç ${executor.tag}`, {
        guildId: guild.id,
        guildName: guild.name,
        executorId: executor.id,
        executorTag: executor.tag,
        rolesCreated: roles.length
      });

      const member = guild.members.cache.get(executor.id);
      if (!member) return;

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
      let deletedCount = 0;
      for (const roleInfo of roles) {
        try {
          const role = guild.roles.cache.get(roleInfo.roleId);
          if (role && role.name !== '@everyone' && role.deletable) {
            await role.delete('–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —Å–ø–∞–º —Ä–æ–ª–µ–π');
            deletedCount++;
          }
        } catch (deleteError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å ${roleInfo.roleName}:`, deleteError);
        }
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
      await this.revokeRolePermissions(member);

      // –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 48 —á–∞—Å–æ–≤
      await this.temporaryBan(member, '48 —á–∞—Å–æ–≤', '–°–ø–∞–º —Ä–æ–ª–µ–π - –∞–≤—Ç–æ–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞');

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdminsAboutCrash(guild, {
        type: 'Role Spam',
        executor: executor.tag,
        executorId: executor.id,
        count: roles.length,
        deleted: deletedCount,
        action: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤'
      });

      // –õ–æ–≥–∏—Ä—É–µ–º
      await this.sendSecurityLog(guild, '–°–ø–∞–º —Ä–æ–ª–µ–π', {
        user: executor.tag,
        userId: executor.id,
        action: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Ä–æ–ª–µ–π, –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω`,
        reason: `–°–æ–∑–¥–∞–Ω–æ ${roles.length} —Ä–æ–ª–µ–π –∑–∞ —á–∞—Å`
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞ —Ä–æ–ª–µ–π:', error);
    }
  }

  async handleInviteSpam(guild, inviter, invites) {
    try {
      this.logger.security(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –∏–Ω–≤–∞–π—Ç–æ–≤ –æ—Ç ${inviter.tag}`, {
        guildId: guild.id,
        guildName: guild.name,
        inviterId: inviter.id,
        inviterTag: inviter.tag,
        invitesCreated: invites.length
      });

      const member = guild.members.cache.get(inviter.id);
      if (!member) return;

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–∞–π—Ç—ã
      let deletedCount = 0;
      const guildInvites = await guild.invites.fetch();
      
      for (const inviteInfo of invites) {
        try {
          const invite = guildInvites.get(inviteInfo.inviteCode);
          if (invite) {
            await invite.delete('–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —Å–ø–∞–º –∏–Ω–≤–∞–π—Ç–æ–≤');
            deletedCount++;
          }
        } catch (deleteError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–≤–∞–π—Ç ${inviteInfo.inviteCode}:`, deleteError);
        }
      }

      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤
      await this.revokeInvitePermissions(member);

      // –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 12 —á–∞—Å–æ–≤
      await this.temporaryMute(member, 12 * 60 * 60 * 1000, '–°–ø–∞–º –∏–Ω–≤–∞–π—Ç–æ–≤');

      // –õ–æ–≥–∏—Ä—É–µ–º
      await this.sendSecurityLog(guild, '–°–ø–∞–º –∏–Ω–≤–∞–π—Ç–æ–≤', {
        user: inviter.tag,
        userId: inviter.id,
        action: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∏–Ω–≤–∞–π—Ç–æ–≤, –º—É—Ç –Ω–∞ 12 —á–∞—Å–æ–≤`,
        reason: `–°–æ–∑–¥–∞–Ω–æ ${invites.length} –∏–Ω–≤–∞–π—Ç–æ–≤ –∑–∞ —á–∞—Å`
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞ –∏–Ω–≤–∞–π—Ç–æ–≤:', error);
    }
  }

  async revokeChannelPermissions(member) {
    try {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const role of member.roles.cache.values()) {
        if (role.name === '@everyone') continue;
        
        if (role.permissions.has(PermissionFlagsBits.ManageChannels)) {
          const newPermissions = role.permissions.toArray().filter(perm => 
            perm !== PermissionFlagsBits.ManageChannels
          );
          
          try {
            await role.setPermissions(newPermissions, '–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —É–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏');
          } catch (permError) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏ ${role.name}:`, permError);
          }
        }
      }
      
      this.logger.action(`–£–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —É ${member.user.tag}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –Ω–∞ –∫–∞–Ω–∞–ª—ã:', error);
    }
  }

  async revokeRolePermissions(member) {
    try {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const role of member.roles.cache.values()) {
        if (role.name === '@everyone') continue;
        
        if (role.permissions.has(PermissionFlagsBits.ManageRoles)) {
          const newPermissions = role.permissions.toArray().filter(perm => 
            perm !== PermissionFlagsBits.ManageRoles
          );
          
          try {
            await role.setPermissions(newPermissions, '–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —É–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏');
          } catch (permError) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏ ${role.name}:`, permError);
          }
        }
      }
      
      this.logger.action(`–£–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ —É ${member.user.tag}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –Ω–∞ —Ä–æ–ª–∏:', error);
    }
  }

  async revokeInvitePermissions(member) {
    try {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const role of member.roles.cache.values()) {
        if (role.name === '@everyone') continue;
        
        if (role.permissions.has(PermissionFlagsBits.CreateInstantInvite)) {
          const newPermissions = role.permissions.toArray().filter(perm => 
            perm !== PermissionFlagsBits.CreateInstantInvite
          );
          
          try {
            await role.setPermissions(newPermissions, '–ê–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç–∞ - —É–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤');
          } catch (permError) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏ ${role.name}:`, permError);
          }
        }
      }
      
      this.logger.action(`–£–±—Ä–∞–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–æ–≤ —É ${member.user.tag}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø—Ä–∞–≤ –Ω–∞ –∏–Ω–≤–∞–π—Ç—ã:', error);
    }
  }

  async temporaryBan(member, duration, reason) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        const embed = new EmbedBuilder()
          .setColor(0xFF0000)
          .setTitle('üî® –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞')
          .setDescription(`–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **${member.guild.name}**`)
          .addFields(
            { name: '–ü—Ä–∏—á–∏–Ω–∞', value: reason, inline: true },
            { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: duration, inline: true }
          )
          .setTimestamp();

        await member.send({ embeds: [embed] });
      } catch (dmError) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${member.user.tag}`);
      }

      // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await member.ban({ reason: `${reason} (${duration})` });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
      const banDuration = this.parseDuration(duration);
      if (banDuration > 0) {
        setTimeout(async () => {
          try {
            await member.guild.bans.remove(member.user.id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∞–Ω –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
            this.logger.action(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}`);
          } catch (unbanError) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–±–∞–Ω–µ:', unbanError);
          }
        }, banDuration);
      }

      this.logger.action(`–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (${duration}) –¥–ª—è ${member.user.tag}: ${reason}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –±–∞–Ω–µ:', error);
    }
  }

  async temporaryMute(member, duration, reason) {
    try {
      // –ò—â–µ–º —Ä–æ–ª—å –º—É—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
      let muteRole = member.guild.roles.cache.find(role => role.name === 'Muted');
      
      if (!muteRole) {
        muteRole = await member.guild.roles.create({
          name: 'Muted',
          color: '#818181',
          permissions: []
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        for (const channel of member.guild.channels.cache.values()) {
          try {
            await channel.permissionOverwrites.create(muteRole, {
              SendMessages: false,
              Speak: false,
              AddReactions: false
            });
          } catch (permError) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º—É—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.name}:`, permError);
          }
        }
      }

      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –º—É—Ç–∞
      await member.roles.add(muteRole);

      // –£–±–∏—Ä–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(async () => {
        try {
          if (member.roles.cache.has(muteRole.id)) {
            await member.roles.remove(muteRole);
            this.logger.action(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –º—É—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}`);
          }
        } catch (unmuteError) {
          this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞:', unmuteError);
        }
      }, duration);

      this.logger.action(`–í—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç (${duration}ms) –¥–ª—è ${member.user.tag}: ${reason}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –º—É—Ç–µ:', error);
    }
  }

  parseDuration(durationStr) {
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const match = durationStr.match(/(\d+)\s*(—á–∞—Å|—á–∞—Å–æ–≤|–¥–Ω–µ–π|–¥–Ω—è|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)/i);
    if (!match) return 0;

    const amount = parseInt(match[1]);
    const unit = match[2].toLowerCase();

    switch (true) {
      case unit.includes('–º–∏–Ω—É—Ç'):
        return amount * 60 * 1000;
      case unit.includes('—á–∞—Å'):
        return amount * 60 * 60 * 1000;
      case unit.includes('–¥–Ω'):
        return amount * 24 * 60 * 60 * 1000;
      default:
        return 0;
    }
  }

  async notifyAdminsAboutCrash(guild, crashInfo) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–Ω–ª–∞–π–Ω
      const admins = guild.members.cache.filter(member => 
        member.permissions.has(PermissionFlagsBits.Administrator) &&
        member.presence?.status !== 'offline'
      );

      const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–ü–´–¢–ö–ê –ö–†–ê–®–ê! (${crashInfo.type})`)
        .setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–ª—Å—è –æ–±—Ä—É—à–∏—Ç—å —Å–µ—Ä–≤–µ—Ä **${guild.name}**!`)
        .addFields(
          { name: '–ù–∞—Ä—É—à–∏—Ç–µ–ª—å', value: `${crashInfo.executor} (${crashInfo.executorId})`, inline: true },
          { name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', value: crashInfo.count.toString(), inline: true },
          { name: '–£–¥–∞–ª–µ–Ω–æ', value: crashInfo.deleted.toString(), inline: true },
          { name: '–ü—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã', value: crashInfo.action, inline: false }
        )
        .setTimestamp();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      for (const admin of admins.values()) {
        try {
          await admin.send({ embeds: [embed] });
        } catch (dmError) {
          this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.user.tag}:`, dmError);
        }
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∞—à–µ:', error);
    }
  }

  async sendSecurityLog(guild, title, details) {
    try {
      const logChannelId = this.config.logChannelId;
      if (!logChannelId) return;

      const logChannel = guild.channels.cache.get(logChannelId);
      if (!logChannel) return;

      const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle(`üõ°Ô∏è ${title}`)
        .addFields(
          { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `${details.user} (${details.userId})`, inline: true },
          { name: '–î–µ–π—Å—Ç–≤–∏–µ', value: details.action, inline: true },
          { name: '–ü—Ä–∏—á–∏–Ω–∞', value: details.reason, inline: false }
        )
        .setTimestamp();

      await logChannel.send({ embeds: [embed] });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –∞–Ω—Ç–∏–∫—Ä–∞—à –∑–∞—â–∏—Ç—ã:', error);
    }
  }

  isPermittedUser(member) {
    if (!member) return false;
    
    return member.permissions.has(PermissionFlagsBits.Administrator) ||
           member.permissions.has(PermissionFlagsBits.ManageGuild) ||
           this.config.adminRoles.some(roleName => 
             member.roles.cache.some(role => 
               role.name.toLowerCase().includes(roleName.toLowerCase())
             )
           );
  }

  cleanupActionData() {
    const now = Date.now();
    const maxAge = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
    
    for (const [actionKey, actions] of this.serverActions.entries()) {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π
      actions.channels = actions.channels.filter(action => 
        now - action.timestamp <= maxAge
      );
      actions.roles = actions.roles.filter(action => 
        now - action.timestamp <= maxAge
      );
      actions.invites = actions.invites.filter(action => 
        now - action.timestamp <= maxAge
      );
      
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
      if (actions.channels.length === 0 && 
          actions.roles.length === 0 && 
          actions.invites.length === 0) {
        this.serverActions.delete(actionKey);
      }
    }
    
    this.logger.info(`–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω—Ç–∏–∫—Ä–∞—à —Å–∏—Å—Ç–µ–º—ã: –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${this.serverActions.size}`);
  }
}

module.exports = AntiCrash;