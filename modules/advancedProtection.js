const { PermissionFlagsBits, AuditLogEvent } = require('discord.js');

class AdvancedProtection {
  constructor(client, config, logger) {
    this.client = client;
    this.config = config;
    this.logger = logger;
    this.suspiciousUsers = new Map();
    this.rateLimits = new Map();
    this.backupData = new Map();
    this.emergencyMode = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞—â–∏—Ç—ã
   */
  initialize() {
    this.setupEventListeners();
    this.startBackgroundTasks();
    this.logger.info('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  }

  setupEventListeners() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    this.client.on('guildMemberUpdate', (oldMember, newMember) => {
      this.checkPermissionChanges(oldMember, newMember);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ Audit Log
    this.client.on('guildAuditLogEntryCreate', (auditLog) => {
      this.analyzeAuditLogEntry(auditLog);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤/—Ä–æ–ª–µ–π
    this.client.on('channelDelete', (channel) => {
      this.handleChannelDelete(channel);
    });

    this.client.on('roleDelete', (role) => {
      this.handleRoleDelete(role);
    });

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Å—Å–æ–≤—ã—Ö –±–∞–Ω–æ–≤
    this.client.on('guildBanAdd', (ban) => {
      this.handleBanAdd(ban);
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  async checkPermissionChanges(oldMember, newMember) {
    if (!oldMember || !newMember) return;

    const oldPerms = oldMember.permissions.toArray();
    const newPerms = newMember.permissions.toArray();
    
    const addedPerms = newPerms.filter(perm => !oldPerms.includes(perm));
    const removedPerms = oldPerms.filter(perm => !newPerms.includes(perm));

    if (addedPerms.length > 0 || removedPerms.length > 0) {
      const dangerousPerms = [
        'Administrator',
        'ManageGuild',
        'ManageRoles',
        'ManageChannels',
        'BanMembers',
        'KickMembers',
        'ManageWebhooks'
      ];

      const addedDangerous = addedPerms.filter(perm => dangerousPerms.includes(perm));
      
      if (addedDangerous.length > 0) {
        this.logger.warn(`‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${newMember.user.tag}: ${addedDangerous.join(', ')}`);
        await this.flagSuspiciousActivity(newMember.user.id, 'dangerous_permissions_granted', {
          permissions: addedDangerous
        });
      }
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π Audit Log –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async analyzeAuditLogEntry(auditLog) {
    const { action, executor, target } = auditLog;
    
    if (!executor || executor.bot) return;

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const massActions = [
      AuditLogEvent.ChannelCreate,
      AuditLogEvent.ChannelDelete,
      AuditLogEvent.RoleCreate,
      AuditLogEvent.RoleDelete,
      AuditLogEvent.MemberBanAdd,
      AuditLogEvent.MemberKick
    ];

    if (massActions.includes(action)) {
      await this.trackRateLimit(executor.id, action);
    }

    // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
    const criticalActions = [
      AuditLogEvent.GuildUpdate,
      AuditLogEvent.ChannelDelete,
      AuditLogEvent.RoleDelete,
      AuditLogEvent.MemberBanAdd
    ];

    if (criticalActions.includes(action)) {
      this.logger.warn(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${executor.tag}`);
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async trackRateLimit(userId, action) {
    const key = `${userId}-${action}`;
    const now = Date.now();
    
    if (!this.rateLimits.has(key)) {
      this.rateLimits.set(key, []);
    }

    const timestamps = this.rateLimits.get(key);
    timestamps.push(now);

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    const oneHour = 60 * 60 * 1000;
    const filtered = timestamps.filter(time => now - time < oneHour);
    this.rateLimits.set(key, filtered);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    const limits = this.config.rateLimiting.global;
    let exceeded = false;

    switch (action) {
      case AuditLogEvent.ChannelCreate:
      case AuditLogEvent.ChannelDelete:
        if (filtered.length > limits.channels.limit) exceeded = true;
        break;
      case AuditLogEvent.RoleCreate:
      case AuditLogEvent.RoleDelete:
        if (filtered.length > limits.roles.limit) exceeded = true;
        break;
      case AuditLogEvent.MemberBanAdd:
        if (filtered.length > limits.bans.limit) exceeded = true;
        break;
    }

    if (exceeded) {
      await this.handleRateLimitExceeded(userId, action, filtered.length);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit
   */
  async handleRateLimitExceeded(userId, action, count) {
    this.logger.error(`üö® Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª ${action} ${count} —Ä–∞–∑ –∑–∞ —á–∞—Å`);
    
    await this.flagSuspiciousActivity(userId, 'rate_limit_exceeded', {
      action,
      count,
      timestamp: Date.now()
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    const guild = this.client.guilds.cache.first();
    if (guild) {
      const member = await guild.members.fetch(userId).catch(() => null);
      if (member && this.config.antiCrash.emergencyLockdown) {
        await this.temporaryRestrictUser(member, 'Rate limit exceeded');
      }
    }
  }

  /**
   * –ü–æ–º–µ—Ç–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async flagSuspiciousActivity(userId, type, details) {
    if (!this.suspiciousUsers.has(userId)) {
      this.suspiciousUsers.set(userId, {
        flags: [],
        firstFlagged: Date.now(),
        trustScore: 100
      });
    }

    const userData = this.suspiciousUsers.get(userId);
    userData.flags.push({
      type,
      details,
      timestamp: Date.now()
    });

    // –°–Ω–∏–∂–µ–Ω–∏–µ trust score
    const scoreReduction = this.getScoreReduction(type);
    userData.trustScore = Math.max(0, userData.trustScore - scoreReduction);

    this.logger.warn(`üö© –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${userId} - ${type} (Trust Score: ${userData.trustScore})`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º trust score
    if (userData.trustScore < 30) {
      await this.handleLowTrustScore(userId);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–Ω–∏–∂–µ–Ω–∏—è trust score
   */
  getScoreReduction(type) {
    const reductions = {
      'dangerous_permissions_granted': 30,
      'rate_limit_exceeded': 25,
      'mass_channel_creation': 20,
      'mass_role_creation': 20,
      'suspicious_pattern': 15,
      'fast_actions': 10
    };

    return reductions[type] || 5;
  }

  /**
   * –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async temporaryRestrictUser(member, reason) {
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      const dangerousRoles = member.roles.cache.filter(role => 
        role.permissions.has(PermissionFlagsBits.Administrator) ||
        role.permissions.has(PermissionFlagsBits.ManageGuild) ||
        role.permissions.has(PermissionFlagsBits.ManageRoles)
      );

      if (dangerousRoles.size > 0) {
        await member.roles.remove(dangerousRoles, reason);
        this.logger.info(`üîí –£–¥–∞–ª–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ —Ä–æ–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}`);
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω–æ–π —Ä–æ–ª–∏
      const quarantineRole = member.guild.roles.cache.find(role => 
        role.name.toLowerCase().includes('quarantine') ||
        role.name.toLowerCase().includes('–∫–∞—Ä–∞–Ω—Ç–∏–Ω')
      );

      if (quarantineRole) {
        await member.roles.add(quarantineRole, reason);
        this.logger.info(`‚è∏Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${member.user.tag} –ø–æ–º–µ—â–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω`);
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}:`, error);
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  async activateEmergencyMode(guild, reason) {
    if (this.emergencyMode) return;

    this.emergencyMode = true;
    this.logger.error(`üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú: ${reason}`);

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
    const channels = guild.channels.cache.filter(channel => 
      channel.isTextBased() && channel.manageable
    );

    for (const channel of channels.values()) {
      try {
        await channel.permissionOverwrites.edit(guild.roles.everyone, {
          SendMessages: false,
          AddReactions: false,
          CreatePublicThreads: false,
          CreatePrivateThreads: false
        }, { reason: `Emergency lockdown: ${reason}` });
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª ${channel.name}:`, error);
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(async () => {
      await this.deactivateEmergencyMode(guild);
    }, this.config.raidProtection.lockdownDuration || 600000);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  async deactivateEmergencyMode(guild) {
    if (!this.emergencyMode) return;

    this.emergencyMode = false;
    this.logger.info('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    const channels = guild.channels.cache.filter(channel => 
      channel.isTextBased() && channel.manageable
    );

    for (const channel of channels.values()) {
      try {
        await channel.permissionOverwrites.delete(guild.roles.everyone, 
          { reason: 'Emergency lockdown ended' });
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª ${channel.name}:`, error);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
   */
  getProtectionStats() {
    return {
      suspiciousUsers: this.suspiciousUsers.size,
      emergencyMode: this.emergencyMode,
      rateLimitTracking: this.rateLimits.size,
      backupDataStored: this.backupData.size,
      uptime: process.uptime()
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
   */
  startBackgroundTasks() {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(() => {
      this.cleanupOldData();
    }, 24 * 60 * 60 * 1000);

    // –ê–Ω–∞–ª–∏–∑ trust scores –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    setInterval(() => {
      this.analyzeTrustScores();
    }, 6 * 60 * 60 * 1000);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  cleanupOldData() {
    const now = Date.now();
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π

    // –û—á–∏—Å—Ç–∫–∞ rate limits
    for (const [key, timestamps] of this.rateLimits) {
      const filtered = timestamps.filter(time => now - time < maxAge);
      if (filtered.length === 0) {
        this.rateLimits.delete(key);
      } else {
        this.rateLimits.set(key, filtered);
      }
    }

    this.logger.info('üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ trust scores
   */
  analyzeTrustScores() {
    const now = Date.now();
    const recoveryPeriod = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    for (const [userId, userData] of this.suspiciousUsers) {
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ trust score —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
      const timeSinceLastFlag = now - Math.max(...userData.flags.map(f => f.timestamp));
      
      if (timeSinceLastFlag > recoveryPeriod) {
        userData.trustScore = Math.min(100, userData.trustScore + 5);
        
        if (userData.trustScore >= 90) {
          this.suspiciousUsers.delete(userId);
          this.logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é`);
        }
      }
    }

    this.logger.info(`üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${this.suspiciousUsers.size} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  }
}

module.exports = AdvancedProtection;