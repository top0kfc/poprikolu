const { PermissionFlagsBits, EmbedBuilder } = require('discord.js');

class AntiSpam {
  constructor(client, config, logger) {
    this.client = client;
    this.config = config;
    this.logger = logger;
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.userMessages = new Map();
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupOldMessages();
    }, 5 * 60 * 1000);
  }

  handleMessage(message) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.system) return;
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "Test"
    if (this.config.testing && this.config.testing.enabled) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "Test"
      if (message.author.bot && !message.content.startsWith('Test')) return;
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
      if (message.author.bot) return;
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ù–ï –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤)
    if (!this.config.testing?.enabled && this.isAdmin(message.member)) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º
    if (this.isSpamming(message)) {
      this.handleSpam(message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å–ø–∞–º
    if (this.hasInviteSpam(message)) {
      this.handleInviteSpam(message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (this.hasSuspiciousContent(message)) {
      this.handleSuspiciousContent(message);
    }
  }

  isSpamming(message) {
    const userId = message.author.id;
    const now = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!this.userMessages.has(userId)) {
      this.userMessages.set(userId, []);
    }
    
    const userMsgHistory = this.userMessages.get(userId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    userMsgHistory.push({
      timestamp: now,
      content: message.content,
      channelId: message.channel.id
    });
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞)
    const timeWindow = this.config.antiSpam.timeWindow;
    const recentMessages = userMsgHistory.filter(msg => 
      now - msg.timestamp <= timeWindow
    );
    
    this.userMessages.set(userId, recentMessages);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if (recentMessages.length > this.config.antiSpam.messageLimit) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const uniqueMessages = new Set(recentMessages.map(msg => msg.content.toLowerCase()));
    if (recentMessages.length >= 3 && uniqueMessages.size === 1) {
      return true;
    }
    
    return false;
  }

  hasInviteSpam(message) {
    const inviteRegex = /(https?:\/\/)?(www\.)?(discord\.(gg|io|me|li)|discordapp\.com\/invite|discord\.com\/invite)\/[a-z0-9]+/gi;
    const invites = message.content.match(inviteRegex) || [];
    
    return invites.length > this.config.antiCrash.maxInvitesPerMessage;
  }

  hasSuspiciousContent(message) {
    const content = message.content.toLowerCase();
    
    // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const suspiciousPatterns = [
      /crash|–∫—Ä—ç—à|–∫—Ä–∞—à/gi,
      /raid|—Ä–µ–π–¥/gi,
      /nuke|–Ω—é–∫/gi,
      /token|—Ç–æ–∫–µ–Ω/gi,
      /ddos|–¥–¥–æ—Å/gi,
      /@everyone|@here/gi, // –ú–∞—Å—Å–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
      /nitro.*free|–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.*nitro/gi,
      /discord\.gift/gi
    ];
    
    return suspiciousPatterns.some(pattern => pattern.test(content));
  }

  async handleSpam(message) {
    try {
      const user = message.author;
      const guild = message.guild;
      
      this.logger.security(`–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tag} (${user.id})`, {
        userId: user.id,
        username: user.tag,
        channelId: message.channel.id,
        messageContent: message.content.substring(0, 100)
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message.deletable) {
        await message.delete();
      }

      // –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.muteUser(message.member);

      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.deleteRecentMessages(message.author.id, message.channel);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
      await this.sendSecurityLog(guild, '–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º', {
        user: user.tag,
        userId: user.id,
        action: '–ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç + —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π',
        reason: '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è'
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –õ–°)
      try {
        const embed = new EmbedBuilder()
          .setColor(0xFF0000)
          .setTitle('üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞')
          .setDescription('–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º.')
          .addFields(
            { name: '–ü—Ä–∏—á–∏–Ω–∞', value: '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', inline: true },
            { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: '5 –º–∏–Ω—É—Ç', inline: true }
          )
          .setTimestamp();
        
        await user.send({ embeds: [embed] });
      } catch (dmError) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.tag}:`, dmError);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞:', error);
    }
  }

  async handleInviteSpam(message) {
    try {
      const user = message.author;
      
      this.logger.security(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç-—Å–ø–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tag} (${user.id})`, {
        userId: user.id,
        username: user.tag,
        messageContent: message.content
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message.deletable) {
        await message.delete();
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const warningEmbed = new EmbedBuilder()
        .setColor(0xFFA500)
        .setTitle('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
        .setDescription(`${user}, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π Discord!`)
        .setTimestamp();

      await message.channel.send({ embeds: [warningEmbed] });

      // –õ–æ–≥–∏—Ä—É–µ–º
      await this.sendSecurityLog(message.guild, '–ò–Ω–≤–∞–π—Ç-—Å–ø–∞–º', {
        user: user.tag,
        userId: user.id,
        action: '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
        reason: '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–∞–π—Ç-—Å–ø–∞–º–∞:', error);
    }
  }

  async handleSuspiciousContent(message) {
    try {
      const user = message.author;
      
      this.logger.security(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.tag} (${user.id})`, {
        userId: user.id,
        username: user.tag,
        messageContent: message.content
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message.deletable) {
        await message.delete();
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      const embed = new EmbedBuilder()
        .setColor(0xFF4500)
        .setTitle('üîí –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        .setDescription(`${user}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.`)
        .setTimestamp();

      const sentMessage = await message.channel.send({ embeds: [embed] });
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (sentMessage.deletable) {
          sentMessage.delete().catch(() => {});
        }
      }, 10000);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    }
  }

  async muteUser(member) {
    try {
      const muteDuration = this.config.antiSpam.muteDuration;
      
      // –ò—â–µ–º —Ä–æ–ª—å –¥–ª—è –º—É—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
      let muteRole = member.guild.roles.cache.find(role => role.name === 'Muted');
      
      if (!muteRole) {
        muteRole = await member.guild.roles.create({
          name: 'Muted',
          color: '#818181',
          permissions: []
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        member.guild.channels.cache.forEach(async (channel) => {
          try {
            await channel.permissionOverwrites.create(muteRole, {
              SendMessages: false,
              Speak: false,
              AddReactions: false
            });
          } catch (error) {
            this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.name}:`, error);
          }
        });
      }

      // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –º—É—Ç–∞
      await member.roles.add(muteRole);

      // –£–±–∏—Ä–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      setTimeout(async () => {
        try {
          if (member.roles.cache.has(muteRole.id)) {
            await member.roles.remove(muteRole);
            this.logger.action(`–°–Ω—è—Ç –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag}`);
          }
        } catch (error) {
          this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞:', error);
        }
      }, muteDuration);

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  async deleteRecentMessages(userId, channel) {
    try {
      const messages = await channel.messages.fetch({ limit: 50 });
      const userMessages = messages.filter(msg => 
        msg.author.id === userId && 
        Date.now() - msg.createdTimestamp < 60000 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
      );

      for (const message of userMessages.values()) {
        if (message.deletable) {
          await message.delete();
        }
      }
      
      this.logger.action(`–£–¥–∞–ª–µ–Ω–æ ${userMessages.size} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }

  async sendSecurityLog(guild, title, details) {
    try {
      const logChannelId = this.config.logChannelId;
      if (!logChannelId) return;

      const logChannel = guild.channels.cache.get(logChannelId);
      if (!logChannel) return;

      const embed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle(`üõ°Ô∏è ${title}`)
        .addFields(
          { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `${details.user} (${details.userId})`, inline: true },
          { name: '–î–µ–π—Å—Ç–≤–∏–µ', value: details.action, inline: true },
          { name: '–ü—Ä–∏—á–∏–Ω–∞', value: details.reason, inline: false }
        )
        .setTimestamp();

      await logChannel.send({ embeds: [embed] });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
    }
  }

  isAdmin(member) {
    if (!member) return false;
    
    return member.permissions.has(PermissionFlagsBits.Administrator) ||
           member.permissions.has(PermissionFlagsBits.ManageGuild) ||
           this.config.adminRoles.some(roleName => 
             member.roles.cache.some(role => 
               role.name.toLowerCase().includes(roleName.toLowerCase())
             )
           );
  }

  cleanupOldMessages() {
    const now = Date.now();
    const timeWindow = this.config.antiSpam.timeWindow;
    
    for (const [userId, messages] of this.userMessages.entries()) {
      const recentMessages = messages.filter(msg => 
        now - msg.timestamp <= timeWindow * 2
      );
      
      if (recentMessages.length === 0) {
        this.userMessages.delete(userId);
      } else {
        this.userMessages.set(userId, recentMessages);
      }
    }
    
    this.logger.info(`–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${this.userMessages.size}`);
  }
}

module.exports = AntiSpam;