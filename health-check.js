const { Client } = require('discord.js');
const config = require('./config/config.js');

class HealthChecker {
  constructor() {
    this.client = null;
    this.isHealthy = false;
    this.lastCheck = null;
    this.errors = [];
  }

  async checkBot() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Discord –±–æ—Ç–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (!config.token) {
        throw new Error('Discord —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.client = new Client({ intents: [] });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      const timeout = setTimeout(() => {
        throw new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Discord API');
      }, 10000);

      await this.client.login(config.token);
      clearTimeout(timeout);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (this.client.isReady()) {
        this.isHealthy = true;
        console.log(`‚úÖ –ë–æ—Ç –∑–¥–æ—Ä–æ–≤! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ ${this.client.user.tag}`);
        console.log(`üìä –°–µ—Ä–≤–µ—Ä–æ–≤: ${this.client.guilds.cache.size}`);
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.client.guilds.cache.reduce((a, g) => a + g.memberCount, 0)}`);
      } else {
        throw new Error('–ë–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤');
      }

      this.lastCheck = new Date();
      await this.client.destroy();
      return true;

    } catch (error) {
      this.isHealthy = false;
      this.errors.push({
        timestamp: new Date(),
        error: error.message
      });
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);
      
      if (this.client) {
        await this.client.destroy();
      }
      
      return false;
    }
  }

  async checkMemory() {
    const used = process.memoryUsage();
    const mb = (bytes) => Math.round(bytes / 1024 / 1024 * 100) / 100;
    
    console.log('\nüìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:');
    console.log(`- RSS: ${mb(used.rss)} MB`);
    console.log(`- Heap Used: ${mb(used.heapUsed)} MB`);
    console.log(`- Heap Total: ${mb(used.heapTotal)} MB`);
    console.log(`- External: ${mb(used.external)} MB`);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
    if (mb(used.rss) > 500) {
      console.log('‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!');
      return false;
    }
    
    return true;
  }

  getStatus() {
    return {
      healthy: this.isHealthy,
      lastCheck: this.lastCheck,
      errors: this.errors.slice(-5), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      version: process.version,
      platform: process.platform
    };
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runHealthCheck() {
  const checker = new HealthChecker();
  
  console.log('üè• –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è Discord –±–æ—Ç–∞');
  console.log('‚ïê'.repeat(50));
  
  const botStatus = await checker.checkBot();
  const memoryStatus = checker.checkMemory();
  
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log(`- –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${botStatus ? '‚úÖ –ó–¥–æ—Ä–æ–≤' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
  console.log(`- –ü–∞–º—è—Ç—å: ${memoryStatus ? '‚úÖ OK' : '‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ'}`);
  console.log(`- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime())} —Å–µ–∫—É–Ω–¥`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
  process.exit(botStatus && memoryStatus ? 0 : 1);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runHealthCheck().catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ health check:', error);
    process.exit(1);
  });
}

module.exports = HealthChecker;